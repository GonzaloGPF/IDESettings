<templateSet group="PHP">
  <template name="testclass" value="&lt;?php&#10;&#10;namespace Tests\Feature;&#10;&#10;use Illuminate\Foundation\Testing\RefreshDatabase;&#10;use Tests\TestCase;&#10;&#10;class $CLASS$ extends TestCase&#10;{&#10;    use RefreshDatabase;&#10;&#10;    /** @test */&#10;    function it_$METHOD$()&#10;    {&#10;        $END$&#10;    }&#10;}" description="A  test class template (Feature)" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="METHOD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="testf" value="/** @test */&#10;function it_$METHOD$()&#10;{&#10;    $END$&#10;}" description="A test function" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="weh" value="$this-&gt;withoutExceptionHandling();" description="Without Exception Handling" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="filterclass" value="&lt;?php&#10;&#10;namespace App\Filters;&#10;&#10;use Illuminate\Database\Eloquent\Builder;&#10;&#10;class $NAME$ extends Filter&#10;{&#10;    /**&#10;     * @var array. Applicable filters by request's query strings. Every filter will be use by Filter class.&#10;     * Filter class will look for a method with the same name of the filter.&#10;     */&#10;    protected $filters = ['$ATTRIBUTE$'];&#10;&#10;    /**&#10;     * @param $$$VARIABLE$&#10;     * @return Builder&#10;     */&#10;    protected function $METHOD$($$$VARIABLE$)&#10;    {&#10;        return $this-&gt;builder-&gt;where('$ATTRIBUTE$', $$$VARIABLE$);&#10;    }&#10;}" description="Boilderplate for a Filter class creation" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ATTRIBUTE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VARIABLE" expression="camelCase(ATTRIBUTE)" defaultValue="" alwaysStopAt="true" />
    <variable name="METHOD" expression="camelCase(ATTRIBUTE)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="storef" value="/**&#10; * Store a newly created resource in storage.&#10; *&#10; * @return \Illuminate\Http\JsonResponse&#10; */&#10;public function store()&#10;{&#10;    $$$VAR$ = $MODEL$::create(request()-&gt;all());&#10;    &#10;    return $this-&gt;storeResponse(new $MODEL$Resource($$$VAR$));&#10;}" description="Store function boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="camelCase(MODEL)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="updatef" value="/**&#10; * Update the specified resource in storage.&#10; *&#10; * @param $MODEL$ $$$VAR$&#10; * @return \Illuminate\Http\JsonResponse&#10; */&#10;public function update($MODEL$ $$$VAR$)&#10;{&#10;    $$$VAR$-&gt;update(request()-&gt;all());&#10;&#10;    return $this-&gt;updateResponse(new $MODEL$Resource($$$VAR$));&#10;}" description="Update function boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="camelCase(MODEL)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="destroyf" value="/**&#10; * Remove the specified resource from storage.&#10; *&#10; * @param $MODEL$ $$$var$&#10; * @return \Illuminate\Http\JsonResponse&#10; */&#10;public function destroy($MODEL$ $$$var$)&#10;{&#10;    try {&#10;        $$$var$-&gt;delete();&#10;    } catch (\Exception $e) {&#10;        return $this-&gt;sendData(Response::HTTP_UNPROCESSABLE_ENTITY, trans('session.delete_error'));&#10;    }&#10;&#10;    return $this-&gt;destroyResponse(new $MODEL$Resource($$$var$));&#10;}" description="Delete function boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="var" expression="camelCase(MODEL)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="showf" value="/**&#10; * Display the specified resource.&#10; *&#10; * @param $MODEL$ $$$VAR$&#10; * @return \Illuminate\Http\JsonResponse&#10; */&#10;public function show($MODEL$ $$$VAR$)&#10;{&#10;    return $this-&gt;showResponse(new $MODEL$Resource($$$VAR$));&#10;}" description="Show function boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="camelCase(MODEL)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="si" value="$this-&gt;signIn();" description="Sign In shortcut" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="testfd" value="/** &#10; * @test&#10; * @returns void&#10; * @throws \Exception&#10; * @throws \Throwable&#10; */&#10;function it_$METHOD$()&#10;{&#10;    $END$&#10;}" description="A test function for Dusk" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="indexf" value="/**&#10; * Display the specified resource.&#10; *&#10; * @return \Illuminate\Http\JsonResponse&#10; */&#10;public function index()&#10;{&#10;    return $this-&gt;indexResponse($RESOURCE$Resource::collection($MODEL$::all()));&#10;}" description="Index function boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RESOURCE" expression="MODEL" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="indexff" value="/**&#10; * Display the specified resource.&#10; *&#10; * @param $MODEL$Filter $filter&#10; * @return \Illuminate\Http\JsonResponse&#10; */&#10;public function index($MODEL$Filter $filter)&#10;{&#10;    $$$models$s = $MODEL$::filter($filter)-&gt;getOrPaginate();&#10;    &#10;    return $this-&gt;indexResponse($MODEL$Resource::collection($$$models$s));&#10;}" description="Index function with filters boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="models" expression="camelCase(MODEL)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="apicontroller" value="&lt;?php&#10;&#10;namespace App\Http\Controllers\Api;&#10;&#10;use App\$MODEL$;&#10;use App\Filters\$MODEL$sFilter;&#10;use App\Http\Controllers\Controller;&#10;use App\Http\Resources\$MODEL$Resource;&#10;&#10;class $MODEL$sController extends Controller&#10;{&#10;    /**&#10;     * Display a listing of the resource.&#10;     *&#10;     * @param $MODEL$sFilter $filter&#10;     * @return \Illuminate\Http\JsonResponse|\Illuminate\Http\Response&#10;     */&#10;    public function index($MODEL$sFilter $filter)&#10;    {&#10;        $$$VAR$s = $MODEL$::filter($filter)-&gt;getOrPaginate();&#10;        &#10;        return $this-&gt;indexResponse($MODEL$Resource::collection($$$VAR$s));&#10;    }&#10;}" description="Api Controller boilarplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="cameCase(MODEL)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="testff" value="/** @test */&#10;function it_can_fetch_$MODELNAME$s_by_$ATTRIBUTE$()&#10;{&#10;    $$$VAR$ = create($MODEL$::class, ['$ATTRIBUTE$' =&gt; $VALUE$]);&#10;&#10;    $data = $this-&gt;makeRequest(['$ATTRIBUTE$' =&gt; $$$VAR$-&gt;$ATTRIBUTE$]);&#10;    $this-&gt;assertCount(1, $data);&#10;}" description="A test function of filters" toReformat="false" toShortenFQNames="true">
    <variable name="MODELNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ATTRIBUTE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="underscoresToCamelCase(MODELNAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="MODEL" expression="capitalize(VAR)" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="test" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>