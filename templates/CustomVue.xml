<templateSet group="CustomVue">
  <template name="vicon" value="&lt;v-icon icon=&quot;$ICON$&quot;/&gt;" description="vIcon template" toReformat="false" toShortenFQNames="true">
    <variable name="ICON" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="vlayout" value="&lt;template&gt;&#10;    &lt;div&gt;&#10;        $TEMPLATE$&#10;    &lt;/div&gt;&#10;&lt;/template&gt;&#10;&lt;script&gt;&#10;export default {&#10;    props: ['$PROP$'],&#10;    &#10;    data(){&#10;        return {&#10;            $END$&#10;        }&#10;    }&#10;}&#10;&lt;/script&gt;" description="Initial template for .vue" toReformat="false" toShortenFQNames="true">
    <variable name="TEMPLATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PROP" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="VUE_COMPONENT_DESCRIPTOR" value="false" />
      <option name="VUE_INSIDE_TAG" value="false" />
      <option name="VUE_SCRIPT" value="false" />
      <option name="VUE_TEMPLATE" value="false" />
      <option name="Vue" value="true" />
    </context>
  </template>
  <template name="vmodal" value="&lt;v-modal :show=&quot;showModal&quot;&#10;         :title=&quot;$TITLE$&quot;&#10;         @close=&quot;showModal = false&quot;&#10;         @submit=&quot;$SUBMIT$&quot;&gt;&#10;    $CONTENT$&#10;&lt;/v-modal&gt;" description="vModal template" toReformat="false" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SUBMIT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CONTENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="vrow" value="&lt;v-row&gt;&#10;    $END$      &#10;&lt;/v-row&gt;" description="vRow template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="vcol" value="&lt;v-col&gt;&#10;    $END$      &#10;&lt;/v-col&gt;" description="vCol template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="vbutton" value="&lt;v-button :title=&quot;$t('controls.$CONTROL$')&quot;&#10;          icon=&quot;$ICON$&quot;&#10;          @click=&quot;$ACTION$&quot;/&gt;" description="vButton template" toReformat="false" toShortenFQNames="true">
    <variable name="CONTROL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ICON" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="vmodule" value="import Vue from 'vue';&#10;import Http from '../../objects/Http';&#10;&#10;export default {&#10;    namespaced: true,&#10;&#10;    state: {&#10;        $MODULE$: {}&#10;    },&#10;&#10;    getters: {&#10;        $MODULE$: (state) =&gt; state.$MODULE$&#10;    },&#10;&#10;    mutations: {&#10;        set$MODEL$(state, data) {&#10;            Vue.set(state, '$MODULE$', data);&#10;        }&#10;    },&#10;&#10;    actions: {&#10;        fetch: () =&gt; {&#10;        &#10;        },&#10;        create: (context, form) =&gt; {&#10;            return Http.post('$URL$s', this.toFormData(form))&#10;                .then(({data}) =&gt; context.dispatch('$MODULE$s/read', data.data.id));&#10;        },&#10;        read: (context, id) =&gt; {&#10;            let params = {&#10;                with: []&#10;            };&#10;            return Http.get(`$URL$s/${id}`, {params})&#10;                .then(({data}) =&gt; {&#10;                    context.commit('set$MODEL$', data.data);&#10;&#10;                    return Promise.resolve(context.state.$MODULE$);&#10;                })&#10;        },&#10;        update: (context, form) =&gt; {&#10;            return Http.put(`$URL$s/${form.id}`, form)&#10;                .then(({data}) =&gt; context.commit('set$MODEL$', data.data));&#10;        },&#10;        delete: (context, id) =&gt; {&#10;            return Http.delete(`$URL$s/${form.id}`)&#10;        }&#10;    }&#10;}" description="Vuex module boilderplate" toReformat="false" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODEL" expression="capitalize(MODULE)" defaultValue="" alwaysStopAt="true" />
    <variable name="URL" expression="snakeCase(MODULE)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
    </context>
  </template>
</templateSet>